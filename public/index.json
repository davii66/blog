[{"content":"\r\n\u003e[limitPNG](http://nullice.com/limitPNG/) 支持无损压缩和有损压缩两种压缩方式，其中无损压缩是不损失任何画质的压缩方法，与有损压缩相比（如 tinypng），虽然体积没优势，但是在对品质有要求的生产环境中不改变原图任何一个像素是必须的。\r\n\r\n增加Web版本后，使用更加简便。\r\n\r\n![](/images/limitpng.png)\r\n[limitPNG](http://nullice.com/limitPNG/)原版使用的是`Electron`，这也就意味着原版代码只要去掉UI部分并暴露API接口就可以在NodeJS环境下运行。前端代码使用`Vue`，将打开文件的函数更换为`Webuploader`并将处理部分及其回调函数更改为API调用。\r\n\r\n\u003eGithub开源地址：[https://github.com/homeii/limitpng-online](https://github.com/homeii/limitpng-online)\r\n\r\n### 附录：limit极限无损压图算法\r\n非常的简单...其他算法可在`limitpng.js`中获得\r\n```shell\r\nTruePNG  文件名\r\npngout  文件名\r\npngwolf --in=文件名 --out=文件名\r\nzopflipng -m -y 文件名  文件名\r\n```","cover":"/images/limitpng.png","link":"limitpng-online.html","preview":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"http://nullice.com/limitPNG/\"\u003elimitPNG\u003c/a\u003e 支持无损压缩和有损压缩两种压缩方式，其中无损压缩是不损失任何画质的压缩方法，与有损压缩相比（如 tinypng），虽然体积没优势，但是在对品质有要求的生产环境中不改变原图任何一个像素是必须的。\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e增加Web版本后，使用更加简便。\u003c/p\u003e\n","title":"移植无损压图工具LimitPNG到web端"},{"content":"\r\n\r\n第三方评论的战场上，多说倒下了，云跟帖倒下了，disqus连接受阻，剩下搜狐畅言和几个小平台摇摇欲坠...\r\n无论如何，这时候还是自建评论系统最可靠。这里要讲的就是目前比较成熟的hashover。\r\n\r\n![](/images/hashover.png)\r\n## 下载\u0026安装\r\n\u003eGithub地址：[https://github.com/jacobwb/hashover-next](https://github.com/jacobwb/hashover-next)\r\n\r\n直接打包下载解压到服务器即可。随后，按照里面的提示修改`hashover/scripts/settings.php`，即可直接使用。\r\n\r\n## 探坑\r\n虽然现在hashover已经可以正常运行，但其实还存在有很多坑。下面是我踩到的部分。\r\n\r\n### PDO错误\r\n在选择mysql并填好数据库信息后出现了这样的错误提示：`HashOver:PDO.php file could not be included!`，\r\n原因是某个地方PDO类忘了加根命名空间。目前这个问题已经有人提交了PR，官方合并之前我们可以自己先改一下。\r\n\r\n`hashover/scripts/parsesql.php`\r\n```php\r\nLine 76  在PDO前面加上“\\”\r\n$fetchAll = $results-\u003efetchAll (\\PDO::FETCH_NUM);\r\n\r\nLine 111 同理\r\nreturn (array) $result-\u003efetch (\\PDO::FETCH_ASSOC);\r\n```\r\n### AJAX跨域问题\r\n当在配置文件启用ajax模式的时候，你会发现所有请求全部失败了。\r\n因为hashover并没有对跨域访问进行处理（加cors头），所以请求被浏览器拦截。\r\n\r\n可在`hashover/scripts/settings.php`顶部加入代码或者用Nginx/apache进行配置。\r\n```php\r\nheader(\"Access-Control-Allow-Origin:\".(isset($_SERVER['HTTP_ORIGIN'])?$_SERVER['HTTP_ORIGIN']:\"*\"));\r\nheader(\"Access-Control-Allow-Credentials:true\");\r\n```\r\n### 不保存用户信息问题\r\n前文说过hashover并没有对跨域访问进行处理，所以只加cors头无法保存cookies。\r\n解决方法是在`hashover/scripts/javascript-mode.php`中查找`XMLHttpRequest`\r\n并给所有的XHR对象全部加上`withCredentials=true`。\r\n## 美化（魔改）\r\nHashOver提供一个主题机制，可以在`hashover/themes`各个主题的文件夹中修改`layout.html`和`style.css`来自定义样式。\r\n具体魔改例子可看本站评论区，也可自己下载本站CSS。\r\n### 几个魔改想法（尚未实现）：\r\n* 加上表情包\r\n* 加上显示地区和UA\r\n* 加上评论等级\r\n* 在不启用密码的情况下做评论管理\r\n* 魔改成弹幕系统的后端\r\n\r\n如果真能实现，这个系统就万能了（才不是呢）。","cover":"/images/hashover.png","link":"hashover.html","preview":"\u003cp\u003e第三方评论的战场上，多说倒下了，云跟帖倒下了，disqus连接受阻，剩下搜狐畅言和几个小平台摇摇欲坠\u0026hellip;\n无论如何，这时候还是自建评论系统最可靠。这里要讲的就是目前比较成熟的hashover。\u003c/p\u003e\n","title":"使用\u0026魔改hashover评论系统"},{"content":"\r\n没错，又是我。这次又把博客推翻重做了一遍，换了最简单的静态博客。\r\n\r\n不忘初心，方得始终。\r\n\r\n程序用的是`纸小墨`，看中的是他只要带着一个exe就可以随便跑，不需要像其他博客系统一样装环境....此外这也是第一次尝试markdown吧...\r\n\r\n","cover":"/images/example-en.png","link":"new-start.html","preview":"\u003cp\u003e没错，又是我。这次又把博客推翻重做了一遍，换了最简单的静态博客。\u003c/p\u003e\n\n\u003cp\u003e不忘初心，方得始终。\u003c/p\u003e\n","title":"MyBlog新的开始"}]